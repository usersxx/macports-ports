--- make/Bundles.gmk
+++ make/Bundles.gmk
@@ -278,7 +278,16 @@
       $(SYMBOLS_EXCLUDE_PATTERN), \
       $(ALL_JRE_FILES))
 
-  ifeq ($(MACOSX_CODESIGN_MODE), hardened)
+  # On Macosx release builds, when there is a code signing certificate available,
+  # the final bundle layout can be signed.
+  SIGN_BUNDLE := false
+  ifeq ($(call isTargetOs, macosx)+$(DEBUG_LEVEL), true+release)
+    ifneq ($(CODESIGN), )
+      SIGN_BUNDLE := true
+    endif
+  endif
+
+  ifeq ($(SIGN_BUNDLE), true)
     # Macosx release build and code signing available.
 
     ################################################################################

--- make/autoconf/basic_tools.m4
+++ make/autoconf/basic_tools.m4
@@ -160,23 +160,25 @@
 AC_DEFUN([BASIC_CHECK_MAKE_OUTPUT_SYNC],
 [
   # Check if make supports the output sync option and if so, setup using it.
-  UTIL_ARG_WITH(NAME: output-sync, TYPE: literal,
-      VALID_VALUES: [none recurse line target], DEFAULT: recurse,
-      OPTIONAL: true, ENABLED_DEFAULT: true,
-      ENABLED_RESULT: OUTPUT_SYNC_SUPPORTED,
-      CHECKING_MSG: [for make --output-sync value],
-      DESC: [set make --output-sync type if supported by make],
-      CHECK_AVAILABLE:
-      [
         AC_MSG_CHECKING([if make --output-sync is supported])
-        if ! $MAKE --version -O > /dev/null 2>&1; then
-          AC_MSG_RESULT([no])
-          AVAILABLE=false
-        else
+  if $MAKE --version -O > /dev/null 2>&1; then
+    OUTPUT_SYNC_SUPPORTED=true
           AC_MSG_RESULT([yes])
+    AC_MSG_CHECKING([for output-sync value])
+    AC_ARG_WITH([output-sync], [AS_HELP_STRING([--with-output-sync],
+      [set make output sync type if supported by make. @<:@recurse@:>@])],
+      [OUTPUT_SYNC=$with_output_sync])
+    if test "x$OUTPUT_SYNC" = "x"; then
+      OUTPUT_SYNC=none
+    fi
+    AC_MSG_RESULT([$OUTPUT_SYNC])
+    if ! $MAKE --version -O$OUTPUT_SYNC > /dev/null 2>&1; then
+      AC_MSG_ERROR([Make did not the support the value $OUTPUT_SYNC as output sync type.])
+    fi
+  else
+    OUTPUT_SYNC_SUPPORTED=false
+    AC_MSG_RESULT([no])
         fi
-      ]
-  )
   AC_SUBST(OUTPUT_SYNC_SUPPORTED)
   AC_SUBST(OUTPUT_SYNC)
 ])
@@ -376,6 +378,43 @@
     UTIL_REQUIRE_PROGS(MIG, mig)
     UTIL_REQUIRE_PROGS(XATTR, xattr)
     UTIL_LOOKUP_PROGS(CODESIGN, codesign)
+
+    if test "x$CODESIGN" != "x"; then
+      # Check for user provided code signing identity.
+      # If no identity was provided, fall back to "openjdk_codesign".
+      AC_ARG_WITH([macosx-codesign-identity], [AS_HELP_STRING([--with-macosx-codesign-identity],
+        [specify the code signing identity])],
+        [MACOSX_CODESIGN_IDENTITY=$with_macosx_codesign_identity],
+        [MACOSX_CODESIGN_IDENTITY=openjdk_codesign]
+      )
+
+      AC_SUBST(MACOSX_CODESIGN_IDENTITY)
+
+      # Verify that the codesign certificate is present
+      AC_MSG_CHECKING([if codesign certificate is present])
+      $RM codesign-testfile
+      $TOUCH codesign-testfile
+      $CODESIGN -s "$MACOSX_CODESIGN_IDENTITY" codesign-testfile 2>&AS_MESSAGE_LOG_FD \
+          >&AS_MESSAGE_LOG_FD || CODESIGN=
+      $RM codesign-testfile
+      if test "x$CODESIGN" = x; then
+        AC_MSG_RESULT([no])
+      else
+        AC_MSG_RESULT([yes])
+        # Verify that the codesign has --option runtime
+        AC_MSG_CHECKING([if codesign has --option runtime])
+        $RM codesign-testfile
+        $TOUCH codesign-testfile
+        $CODESIGN --option runtime -s "$MACOSX_CODESIGN_IDENTITY" codesign-testfile \
+            2>&AS_MESSAGE_LOG_FD >&AS_MESSAGE_LOG_FD || CODESIGN=
+        $RM codesign-testfile
+        if test "x$CODESIGN" = x; then
+          AC_MSG_ERROR([codesign does not have --option runtime. macOS 10.13.6 and above is required.])
+        else
+          AC_MSG_RESULT([yes])
+        fi
+      fi
+    fi
     UTIL_REQUIRE_PROGS(SETFILE, SetFile)
   fi
   if ! test "x$OPENJDK_TARGET_OS" = "xwindows"; then

--- make/autoconf/compare.sh.in
+++ make/autoconf/compare.sh.in
@@ -40,7 +40,6 @@
 export BASH="@BASH@"
 export CAT="@CAT@"
 export CMP="@CMP@"
-export CODESIGN="@CODESIGN@"
 export CP="@CP@"
 export CUT="@CUT@"
 export DIFF="@DIFF@"

--- make/autoconf/configure.ac
+++ make/autoconf/configure.ac
@@ -249,7 +249,6 @@
 JDKOPT_ENABLE_DISABLE_MANPAGES
 JDKOPT_ENABLE_DISABLE_CDS_ARCHIVE
 JDKOPT_ENABLE_DISABLE_COMPATIBLE_CDS_ALIGNMENT
-JDKOPT_SETUP_MACOSX_SIGNING
 
 ###############################################################################
 #
--- make/autoconf/jdk-options.m4
+++ make/autoconf/jdk-options.m4
@@ -727,105 +727,3 @@
   AC_SUBST(SOURCE_DATE)
   AC_SUBST(ENABLE_REPRODUCIBLE_BUILD)
 ])
-
-################################################################################
-#
-# Setup signing on macOS. This can either be setup to sign with a real identity
-# and enabling the hardened runtime, or it can simply add the debug entitlement
-# com.apple.security.get-task-allow without actually signing any binaries. The
-# latter is needed to be able to debug processes and dump core files on modern
-# versions of macOS. It can also be skipped completely.
-#
-# Check if codesign will run with the given parameters
-# $1: Parameters to run with
-# $2: Checking message
-# Sets CODESIGN_SUCCESS=true/false
-AC_DEFUN([JDKOPT_CHECK_CODESIGN_PARAMS],
-[
-  PARAMS="$1"
-  MESSAGE="$2"
-  CODESIGN_TESTFILE="$CONFIGURESUPPORT_OUTPUTDIR/codesign-testfile"
-  $RM "$CODESIGN_TESTFILE"
-  $TOUCH "$CODESIGN_TESTFILE"
-  CODESIGN_SUCCESS=false
-  $CODESIGN $PARAMS "$CODESIGN_TESTFILE" 2>&AS_MESSAGE_LOG_FD \
-      >&AS_MESSAGE_LOG_FD && CODESIGN_SUCCESS=true
-  $RM "$CODESIGN_TESTFILE"
-  AC_MSG_CHECKING([$MESSAGE])
-  if test "x$CODESIGN_SUCCESS" = "xtrue"; then
-    AC_MSG_RESULT([yes])
-  else
-    AC_MSG_RESULT([no])
-  fi
-])
-
-AC_DEFUN([JDKOPT_CHECK_CODESIGN_HARDENED],
-[
-  JDKOPT_CHECK_CODESIGN_PARAMS([-s "$MACOSX_CODESIGN_IDENTITY" --option runtime],
-      [if codesign with hardened runtime is possible])
-])
-
-AC_DEFUN([JDKOPT_CHECK_CODESIGN_DEBUG],
-[
-  JDKOPT_CHECK_CODESIGN_PARAMS([-s -], [if debug mode codesign is possible])
-])
-
-AC_DEFUN([JDKOPT_SETUP_MACOSX_SIGNING],
-[
-  ENABLE_CODESIGN=false
-  if test "x$OPENJDK_TARGET_OS" = "xmacosx" && test "x$CODESIGN" != "x"; then
-
-    UTIL_ARG_WITH(NAME: macosx-codesign, TYPE: literal, OPTIONAL: true,
-        VALID_VALUES: [hardened debug auto], DEFAULT: auto,
-        ENABLED_DEFAULT: true,
-        CHECKING_MSG: [for macosx code signing mode],
-        DESC: [set the macosx code signing mode (hardened, debug, auto)]
-    )
-
-    MACOSX_CODESIGN_MODE=disabled
-    if test "x$MACOSX_CODESIGN_ENABLED" = "xtrue"; then
-
-      # Check for user provided code signing identity.
-      UTIL_ARG_WITH(NAME: macosx-codesign-identity, TYPE: string,
-          DEFAULT: openjdk_codesign, CHECK_VALUE: UTIL_CHECK_STRING_NON_EMPTY,
-          DESC: [specify the macosx code signing identity],
-          CHECKING_MSG: [for macosx code signing identity]
-      )
-      AC_SUBST(MACOSX_CODESIGN_IDENTITY)
-
-      if test "x$MACOSX_CODESIGN" = "xauto"; then
-        # Only try to default to hardened signing on release builds
-        if test "x$DEBUG_LEVEL" = "xrelease"; then
-          JDKOPT_CHECK_CODESIGN_HARDENED
-          if test "x$CODESIGN_SUCCESS" = "xtrue"; then
-            MACOSX_CODESIGN_MODE=hardened
-          fi
-        fi
-        if test "x$MACOSX_CODESIGN_MODE" = "xdisabled"; then
-          JDKOPT_CHECK_CODESIGN_DEBUG
-          if test "x$CODESIGN_SUCCESS" = "xtrue"; then
-            MACOSX_CODESIGN_MODE=debug
-          fi
-        fi
-        AC_MSG_CHECKING([for macosx code signing mode])
-        AC_MSG_RESULT([$MACOSX_CODESIGN_MODE])
-      elif test "x$MACOSX_CODESIGN" = "xhardened"; then
-        JDKOPT_CHECK_CODESIGN_HARDENED
-        if test "x$CODESIGN_SUCCESS" = "xfalse"; then
-          AC_MSG_ERROR([Signing with hardened runtime is not possible])
-        fi
-        MACOSX_CODESIGN_MODE=hardened
-      elif test "x$MACOSX_CODESIGN" = "xdebug"; then
-        JDKOPT_CHECK_CODESIGN_DEBUG
-        if test "x$CODESIGN_SUCCESS" = "xfalse"; then
-          AC_MSG_ERROR([Signing in debug mode is not possible])
-        fi
-        MACOSX_CODESIGN_MODE=debug
-      else
-        AC_MSG_ERROR([unknown value for --with-macosx-codesign: $MACOSX_CODESIGN])
-      fi
-    fi
-    AC_SUBST(MACOSX_CODESIGN_IDENTITY)
-    AC_SUBST(MACOSX_CODESIGN_MODE)
-  fi
-])

--- make/autoconf/spec.gmk.in
+++ make/autoconf/spec.gmk.in
@@ -443,8 +443,7 @@
 # The highest allowed version of macosx
 MACOSX_VERSION_MAX=@MACOSX_VERSION_MAX@
 
-# The macosx code signing configuration
-MACOSX_CODESIGN_MODE:=@MACOSX_CODESIGN_MODE@
+# The macosx code signing identity to use
 MACOSX_CODESIGN_IDENTITY=@MACOSX_CODESIGN_IDENTITY@
 
 # Toolchain type: gcc, clang, xlc, microsoft...

--- make/common/NativeCompilation.gmk
+++ make/common/NativeCompilation.gmk
@@ -267,15 +267,10 @@
 # specialized file is found, returns the default file.
 # $1 Executable to find entitlements file for.
 ENTITLEMENTS_DIR := $(TOPDIR)/make/data/macosxsigning
-ifeq ($(MACOSX_CODESIGN_MODE), debug)
-  CODESIGN_PLIST_SUFFIX := -debug
-else
-  CODESIGN_PLIST_SUFFIX :=
-endif
-DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)/default$(CODESIGN_PLIST_SUFFIX).plist
+DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)/default.plist
 
 GetEntitlementsFile = \
-    $(foreach f, $(ENTITLEMENTS_DIR)/$(strip $(notdir $1))$(CODESIGN_PLIST_SUFFIX).plist, \
+    $(foreach f, $(ENTITLEMENTS_DIR)/$(strip $(notdir $1)).plist, \
       $(if $(wildcard $f), $f, $(DEFAULT_ENTITLEMENTS_FILE)) \
     )
 
@@ -1211,16 +1206,11 @@
 		    $$($1_MT) -nologo -manifest $$($1_MANIFEST) -identity:"$$($1_NAME).exe, version=$$($1_MANIFEST_VERSION)" -outputresource:$$@;#1
                   endif
                 endif
-                # On macosx, optionally run codesign on every binary.
-                # Remove signature explicitly first to avoid warnings if the linker
-                # added a default adhoc signature.
-                ifeq ($(MACOSX_CODESIGN_MODE), hardened)
-		  $(CODESIGN) --remove-signature $$@
+                # This only works if the openjdk_codesign identity is present on the system. Let
+                # silently fail otherwise.
+                ifneq ($(CODESIGN), )
 		  $(CODESIGN) -f -s "$(MACOSX_CODESIGN_IDENTITY)" --timestamp --options runtime \
 		      --entitlements $$(call GetEntitlementsFile, $$@) $$@
-                else ifeq ($(MACOSX_CODESIGN_MODE), debug)
-		  $(CODESIGN) --remove-signature $$@
-		  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@
                 endif
   endif
 
--- make/scripts/compare.sh
+++ make/scripts/compare.sh
@@ -42,7 +42,6 @@
     LDD_CMD="$OTOOL -L"
     DIS_CMD="$OTOOL -v -V -t"
     STAT_PRINT_SIZE="-f %z"
-    STRIP="$STRIP -no_code_signature_warning"
 elif [ "$OPENJDK_TARGET_OS" = "windows" ]; then
     FULLDUMP_CMD="$DUMPBIN -all"
     LDD_CMD="$DUMPBIN -dependents"
@@ -675,22 +674,14 @@
     ORIG_THIS_FILE="$THIS_FILE"
     ORIG_OTHER_FILE="$OTHER_FILE"
 
-    if [ "$STRIP_ALL" = "true" ] || [[ "$STRIP_BEFORE_COMPARE" = *"$BIN_FILE"* ]] \
-           || [ "$OPENJDK_TARGET_OS" = "macosx" ]; then
+    if [ "$STRIP_ALL" = "true" ] || [[ "$STRIP_BEFORE_COMPARE" = *"$BIN_FILE"* ]]; then
         THIS_STRIPPED_FILE=$FILE_WORK_DIR/this/$NAME
         OTHER_STRIPPED_FILE=$FILE_WORK_DIR/other/$NAME
         $MKDIR -p $FILE_WORK_DIR/this $FILE_WORK_DIR/other
         $CP $THIS_FILE $THIS_STRIPPED_FILE
         $CP $OTHER_FILE $OTHER_STRIPPED_FILE
-        if [ "$STRIP_ALL" = "true" ] || [[ "$STRIP_BEFORE_COMPARE" = *"$BIN_FILE"* ]]; then
             $STRIP $THIS_STRIPPED_FILE
             $STRIP $OTHER_STRIPPED_FILE
-        fi
-        # On macosx, always remove any signature before comparing
-        if [ "$OPENJDK_TARGET_OS" = "macosx" ]; then
-            $CODESIGN --remove-signature $THIS_STRIPPED_FILE
-            $CODESIGN --remove-signature $OTHER_STRIPPED_FILE
-        fi
         THIS_FILE="$THIS_STRIPPED_FILE"
         OTHER_FILE="$OTHER_STRIPPED_FILE"
     fi

