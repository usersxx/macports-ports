# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           select 1.0

name                openjdk8
# use format based on macports:
# https://guide.macports.org/chunked/reference.portgroup.html#reference.portgroup.java
# https://github.com/openjdk/jdk8u/tags
# Tags: https://github.com/openjdk/jdk8u/tags
set major 8
set update 372
# Set to the build of the 'jdk8u${update}-b${build}' tag that corresponds to the latest tag with '-ga'
set build 07
version             ${major}u${update}
set ws_ver 1.8.8
set tagsoup_ver 1.2.1
set rhino_ver 6R7
set hamcrest_ver 1.3
revision            0
categories          java devel
supported_archs     ppc x86_64 arm64
license             GPL-2+
maintainers         {outlook.com:usersword123 @usersxx} openmaintainer
description         OpenJDK 8
long_description    JDK 8 and JRE 8 builds of OpenJDK, the Open-Source implementation \
                    of the Java Platform, Standard Edition, and related projects.
homepage            https://openjdk.org/
master_sites        https://git.openjdk.org/jdk8u/archive/refs/tags/ \
                    https://github.com/AdoptOpenJDK/IcedTea-Web/archive/refs/tags/:ws \
                    https://repo1.maven.org/maven2/org/ccil/cowan/tagsoup/tagsoup/${tagsoup_ver}/:tagsoup \
                    https://ftp.mozilla.org/pub/mozilla.org/js/:rhino \
                    https://repo1.maven.org/maven2/org/hamcrest/hamcrest-all/${hamcrest_ver}/:hamcrest
distname            jdk${major}u${update}-ga
worksrcdir          jdk8u-${distname}
set ws_distname icedtea-web-${ws_ver}
set tagsoup_distname tagsoup-${tagsoup_ver}
set rhino_distname rhino1_${rhino_ver}
set hamcrest_distname hamcrest-all-${hamcrest_ver}
distfiles           ${distname}${extract.suffix} \
                    ${ws_distname}${extract.suffix}:ws \
                    ${tagsoup_distname}.jar:tagsoup \
                    ${rhino_distname}.zip:rhino \
                    ${hamcrest_distname}.jar:hamcrest
                    
checksums           ${distname}${extract.suffix} \
                        rmd160  7ffec6da71e24d2913b717b5f31d6be9c2fa7b7e \
                        sha256  3235a744b51896beb1e8b738412982ebc06e2affb9d50ae3371203d9a46504da \
                        size    88002433 \
                    ${ws_distname}${extract.suffix} \
                        rmd160  9da7315b50253d96d441493934166cd5844d1294 \
                        sha256  f4203a605a3c9c50acdcc6eef4a366b9fdd36d95edcd76bcbfede01107cb5fe6 \
                        size    2365638 \
                    ${tagsoup_distname}.jar \
                        rmd160  7e1472b4a9f448b29d1d417e84270b3b85bb205e \
                        sha256  ac97f7b4b1d8e9337edfa0e34044f8d0efe7223f6ad8f3a85d54cc1018ea2e04 \
                        size    90722 \
                    ${rhino_distname}.zip \
                        rmd160  fc83068e8293bad7a8d38250d66f67f98e132451 \
                        sha256  c94c6de3a29b3acbc4eee732e688f75a5d94bd02c9878be4ceb4d3cd220f3866 \
                        size    1753170 \
                    ${hamcrest_distname}.jar \
                        rmd160  dbdade9fc5cbf72b786b5694cb74dce21895bccd \
                        sha256  4877670629ab96f34f5f90ab283125fcd9acb7e683e66319a68be6eb2cca60de \
                        size    306578

set ws_src IcedTea-Web-${ws_distname}
set rhino_bin ${rhino_distname}
set tagsoup_jar ${tagsoup_distname}.jar
set hamcrest_jar ${hamcrest_distname}.jar

depends_lib         port:freetype \
                    port:desktop-file-utils
depends_build       port:autoconf \
                    port:gmake \
                    port:pkgconfig \
                    port:bash \
                    port:bash-completion \
                    port:autoconf \
                    port:automake \
                    port:coreutils \
                    port:gsed \
                    port:rust \
                    port:junit
depends_extract-append     port:unzip

extract.only-delete        ${tagsoup_jar}
extract.only-delete        ${rhino_distname}.zip
extract.only-delete        ${hamcrest_distname}.jar

post-extract {
    system -W ${distpath} "${prefix}/bin/unzip ${distpath}/${rhino_distname}.zip -d ${workpath}"
}

patchfiles          0001-8181503-Can-t-compile-hotspot-with-c-11.patch \
                    0002-Support-XCode-3-14.patch \
                    0003-Ignore-__NSAutoreleaseNoPool-errors.patch \
                    0004-8030812-Change-the-solaris-DTrace-implementation-to-.patch \
                    0005-os_perf_bsd-allow-to-compile-with-ZERO-CPU.patch \
                    0006-Disable-C-11-warnings.patch \
                    0007-Added-macosx-bin-zero-jvm.cfg.patch \
                    0008-ExtendedOptionsImpl.c-define-TCP_KEEPINTVL-and-TCP_K.patch \
                    Support-arm64-and-fix-zero-assembler.diff
# NSFullSizeContentViewWindowMask is available since 10.10
if {${os.platform} eq "darwin" && ${os.major} < 14} {
    patchfiles-append \
                    0009-Revert-8211301-macos-support-full-window-content-opt.patch
}

select.group        java
select.file         ${filespath}/${name}

set tpath /Library/Java
use_xcode           yes
use_configure    yes

if {${configure.build_arch} eq "ppc"} {
    set datamodel 32
    depends_build-append       port:openjdk7-bootstrap
    set boot_dir /Library/Java/JavaVirtualMachines/openjdk7-bootstrap
} else {
    set datamodel 64
    depends_build-append       port:openjdk8-bootstrap
    set boot_dir /Library/Java/JavaVirtualMachines/openjdk8-bootstrap/Contents/Home
}

pre-patch {
    reinplace "s|net.java.openjdk|org.macports.openjdk|g" ${worksrcpath}/common/autoconf/version-numbers
    reinplace "s|MACOSX_BUNDLE_NAME_BASE=\"OpenJDK\"|MACOSX_BUNDLE_NAME_BASE=\"OpenJDK${major}\"|g" ${worksrcpath}/common/autoconf/version-numbers
    reinplace "s|Icon=javaws|Icon=itweb-javaws|g" \
        "${workpath}/${ws_src}/javaws.desktop.in" \
        "${workpath}/${ws_src}/itweb-settings.desktop.in" \
        "${workpath}/${ws_src}/policyeditor.desktop.in"
    reinplace "s|DBROWSERS=-Dused.browsers|DBROWSERS=-Du_.browsers|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|MOZILLA_VERSION_COLLAPSED|MOZILLA_VERSION_COLLAPSE_|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|RhinoBasedPacEvaluator|RhinoBa_PacEvaluator|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|SEDDED_VERSION|_DED_VERSION|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|Passed|Pass_d|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|sed|gsed|g" \
        "${workpath}/${ws_src}/html-gen.sh" \
        "${workpath}/${ws_src}/Makefile.am"
    reinplace "s|DBROWSERS=-Du_.browsers|DBROWSERS=-Dused.browsers|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|MOZILLA_VERSION_COLLAPSE_|MOZILLA_VERSION_COLLAPSED|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|RhinoBa_PacEvaluator|RhinoBasedPacEvaluator|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|_DED_VERSION|SEDDED_VERSION|g" ${workpath}/${ws_src}/Makefile.am
    reinplace "s|Pass_d|Passed|g" ${workpath}/${ws_src}/Makefile.am
}

pre-configure {
    system -W ${workpath}/${ws_src} "./autogen.sh"
}

configure.cmd       ${prefix}/bin/bash ./configure
configure.pre_args  --prefix=${tpath}
set bug_url "https://trac.macports.org/newticket?port=${name}"
# default configure args
configure.args      --with-boot-jdk=${boot_dir} \
                    --with-debug-level=release \
                    --with-freetype-include=${prefix}/include/freetype2 \
                    --with-freetype-lib=${prefix}/lib \
                    --with-target-bits=${datamodel} \
                    --with-extra-cflags="${configure.cflags}" \
                    --with-extra-cxxflags="${configure.cxxflags}" \
                    --with-extra-ldflags="${configure.ldflags}" \
                    --with-milestone=fcs \
                    --with-vendor-name="MacPorts" \
                    --with-vendor-url="https://www.macports.org" \
                    --with-vendor-bug-url="${bug_url}" \
                    --with-vendor-vm-bug-url="${bug_url}" \
                    --with-update-version=${update} \
                    --with-conf-name=openjdk8 \
                    --with-native-debug-symbols=none

if { [string match *clang* ${configure.compiler}] } {
    configure.args-append \
                    --with-toolchain-type=clang
} elseif { [string match *gcc* ${configure.compiler}] } {
    configure.args-append \
                    --with-toolchain-type=gcc
}

build.pre_args-prepend \
                    COMPILER_WARNINGS_FATAL=false

post-patch {
    # NOTE: JDK had hardcoded MACOSX_VERSION_MIN as 10.9.0 when uses clang toolchain
    # and 10.7.0 for gcc toolchain.
    if {${os.platform} eq "darwin" && ${os.major} < 13} {
        reinplace "s|MACOSX_VERSION_MIN=10.9.0|MACOSX_VERSION_MIN=10.7.0|g" \
            ${worksrcpath}/common/autoconf/flags.m4 \
            ${worksrcpath}/common/autoconf/generated-configure.sh
    }
}

if {${configure.build_arch} eq "ppc"} {
    configure.post_args --disable-headful
    post-patch {
        reinplace "s|WARNINGS_ARE_ERRORS = -Werror|WARNING_FLAGS =|g" ${worksrcpath}/hotspot/make/bsd/makefiles/gcc.make
        reinplace "s|WARNING_FLAGS = -Wpointer-arith -Wsign-compare -Wundef -Wunused-function -Wformat=2|WARNING_FLAGS = |g" ${worksrcpath}/hotspot/make/bsd/makefiles/gcc.make
        reinplace "s|@ZERO_ARCHDEF@|PPC|g" ${worksrcpath}/hotspot/make/bsd/platform_zero.in
        reinplace "s|@ZERO_LIBARCH@|ppc|g" ${worksrcpath}/hotspot/make/bsd/platform_zero.in
        reinplace "s|dtraceCheck| |g" ${worksrcpath}/hotspot/make/bsd/makefiles/vm.make
        reinplace "s|LP64=1|LP64=0|g" ${worksrcpath}/hotspot/make/bsd/Makefile
    }
} elseif {${configure.build_arch} eq "x86_64" } {
    if {${os.platform} eq "darwin" && ${os.major} < 11} {
        # NOTE: openjdk8-bootstrap's doesn't work enough to bootstrap openjdk on 10.6
        # It is fails with errors like:
        #   2022-10-01 01:35:43.344 java[12281:1d03] *** NSInvocation: warning: object 0x11478b468 of class 'ThreadUtilities' does not implement methodSignatureForSelector: -- trouble ahead
        #   2022-10-01 01:35:43.345 java[12281:1d03] *** NSInvocation: warning: object 0x11478b468 of class 'ThreadUtilities' does not implement doesNotRecognizeSelector: -- abort
        depends_lib
        depends_build
        known_fail      yes
        pre-fetch {
            ui_error "${name} @${version} requires OS X 10.7 or greater."
            return -code error "incompatible Mac OS X version"
        }
    }
}

variant server \
    conflicts core zero zeroshark \
    description {JVM with normal interpreter and a tiered C1/C2 compiler} {
    configure.args-append  --with-jvm-variants=server
}

variant release \
    conflicts debug \
    description {OpenJDK with no debug information, all optimizations and no asserts} {
    configure.args-append  --with-debug-level=release 
}

variant debug \
    conflicts release \
    description {OpenJDK with debug information, all optimizations and all asserts} {
    configure.args-append  --with-debug-level=fastdebug
    configure.args-delete   --with-native-debug-symbols=none
}

variant core \
    conflicts server \
    description {JVM with interpreter only and no compiler} {
    configure.args-append   --with-jvm-variants=core
}

variant zero \
    conflicts core zeroshark server \
    description {JVM with no assembler, no machine code interpreter and no compiler} {
    set archuc [string toupper ${configure.build_arch}]
    depends_lib-append         port:libffi
    configure.args-append  --with-jvm-variants=zero \
                           --with-extra-cflags="${configure.cflags} -I${prefix}/include -arch ${configure.build_arch}" \
                           --with-extra-cxxflags="${configure.cxxflags} -arch ${configure.build_arch}" \
                           --with-extra-ldflags="${configure.ldflags} -I${prefix}/lib -arch ${configure.build_arch}"
    configure.args-delete  --with-extra-cflags="${configure.cflags}" \
                           --with-extra-cxxflags="${configure.cxxflags}" \
                           --with-extra-ldflags="${configure.ldflags}"
}

variant zeroshark \
    conflicts core zero server \
    description {JVM with no assembler, zero interpreter and shark/llvm compiler backend} {
    set archuc [string toupper ${configure.build_arch}]
    depends_lib-append         port:libffi
    configure.args-append  --with-jvm-variants=zeroshark \
                           --with-extra-cflags="${configure.cflags} -I${prefix}/include -arch ${configure.build_arch}" \
                           --with-extra-cxxflags="${configure.cxxflags} -arch ${configure.build_arch}" \
                           --with-extra-ldflags="${configure.ldflags} -I${prefix}/lib -arch ${configure.build_arch}"
    configure.args-delete  --with-extra-cflags="${configure.cflags}" \
                           --with-extra-cxxflags="${configure.cxxflags}" \
                           --with-extra-ldflags="${configure.ldflags}"
}

if {![variant_isset debug] && ![variant_isset release]} {
    default_variants-append +release
}

if {![variant_isset core] && ![variant_isset zeroshark] && ![variant_isset zero] && ![variant_isset server]} {
    if {${os.major} < 14} {
        default_variants-append +zero
    } else {
        if {${configure.build_arch} eq "x86_64"} {
            default_variants-append +server
        } elseif {${configure.build_arch} eq "arm64"} {
            default_variants-append +zero
        }
    }
}

build.env           BIN_BASH=${prefix}/bin/bash \
                    bashcompdir=${prefix}/etc/profile.d/bash_completion.sh 
build.type          gnu
build.target        images
use_parallel_build  no
set jdkn jdk1.${major}.0_${update}.jdk
set jren jre1.${major}.0_${update}.jre
set jdk_bundle_dir build/openjdk8/images/j2sdk-bundle/${jdkn}/Contents
set jre_bundle_dir build/openjdk8/images/j2re-bundle/${jren}/Contents
set jdk_path ${tpath}/JavaVirtualMachines/${name}
set jre_path ${tpath}/JavaVirtualMachines/${name}-jre
set install_path ${prefix}/share/java/${name}

set ws_configure --prefix="${install_path}"
lappend ws_configure --with-rhino="${workpath}/${rhino_bin}/js.jar"
lappend ws_configure --with-tagsoup="${workpath}/${tagsoup_jar}"
lappend ws_configure --with-jdk-home="${worksrcpath}/${jdk_bundle_dir}"
lappend ws_configure --with-hamcrest="${workpath}/${hamcrest_jar}"
lappend ws_configure --with-itw-libs="DISTRIBUTION"
lappend ws_configure --enable-shell-launchers

post-build {
    system -W ${workpath}/${ws_src} "bash ./configure ${ws_configure}"
    system -W ${workpath}/${ws_src} "gmake DESTDIR=${destroot}"
}

test.run            yes
test.cmd            ${jdk_bundle_dir}/Home/bin/java
test.target         --version

destroot {
    xinstall -m 755 -d ${destroot}${jdk_path}
    xinstall -m 755 -d ${destroot}${jre_path}

    copy ${worksrcpath}/${jdk_bundle_dir} ${destroot}${jdk_path}
    copy ${worksrcpath}/${jre_bundle_dir} ${destroot}${jre_path}

    ln ../Library/Java/JavaVirtualMachines/${name}/Contents/Home/ ${destroot}${install_path}
}
destroot.violate_mtree      yes

post-destroot {
    system -W ${workpath}/${ws_src} "make DESTDIR=\"${destroot}\" "
}

notes "
To make ${name} the default JDK, add this to shell profile and run the following command:
    export JAVA_HOME=${jdk_path}/Contents/Home
    sudo port select --set ${select.group} ${name}
To make the JRE installed by the ${name} the default JRE, add this to shell profile:
    export JAVA_HOME=${jre_path}/Contents/Home
"
    
livecheck.type      regex
livecheck.url       https://github.com/openjdk/jdk8u/tags
livecheck.regex     jdk(8u\[0-9\]+)-ga
