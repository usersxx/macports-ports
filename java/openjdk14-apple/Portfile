# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                openjdk14-apple
version             14.0.2
revision            0
categories          java devel
supported_archs     x86_64 arm64
license             GPL-2+
maintainers         {outlook.com:usersword123 @usersxx} openmaintainer
description         Apple OpenJDK 14 
long_description    This is Apple's JDK
platforms           {darwin >= 18}
homepage            https://www.apple.com/
master_sites        https://github.com/apple/openjdk/archive/refs/tags/
distname            iTunesOpenJDK-1014.0.2.12.1
worksrcdir          openjdk-${distname}

checksums           rmd160  e9c8624ec66d318e6a6e4e1d769f811282ca05f9 \
                    sha256  e8556a73ea36c75953078dfc1bafc9960e64593bc01e733bc772d2e6b519fd4a \
                    size    109325741

depends_lib         port:freetype
depends_build       port:autoconf \
                    port:gmake \
                    port:bash \
                    port:openjdk13-bootstrap

pre-patch {
    reinplace "s|libffi.so.?|libffi.?.dylib|g" ${worksrcpath}/make/autoconf/lib-ffi.m4
    reinplace "s|xmacosx|xwindows|g" ${worksrcpath}/make/autoconf/lib-freetype.m4
    reinplace "s|assert|vmassert|g" ${worksrcpath}/src/hotspot/share/jfr/periodic/jfrNetworkUtilization.cpp
}

pre-build {
    system -W ${worksrcpath} "mkdir -p ${worksrcpath}/build/Frameworks"
    system -W ${worksrcpath} "xcodebuild install -project ${worksrcpath}/apple/JavaNativeFoundation/JavaNativeFoundation.xcodeproj -target JavaNativeFoundation -configuration Release DSTROOT=\"${worksrcpath}/build/Frameworks\" "
}

set tpath /Library/Java
use_configure    yes
configure.cmd       ${prefix}/bin/bash configure
configure.pre_args  --prefix=${tpath}
set bug_url "https://trac.macports.org/newticket?port=${name}"
# default configure args
configure.args      --with-debug-level=release \
                    --with-native-debug-symbols=none \
                    --with-version-string=${version} \
                    --with-target-bits=64 \
                    --with-sysroot=`xcrun --sdk macosx --show-sdk-path` \
                    --with-extra-cflags="${configure.cflags} -F${worksrcpath}/build/Frameworks" \
                    --with-extra-cxxflags="${configure.cxxflags} -F${worksrcpath}/build/Frameworks" \
                    --with-extra-ldflags="${configure.ldflags} -F${worksrcpath}/build/Frameworks" \
                    --with-boot-jdk=/Library/Java/JavaVirtualMachines/openjdk13-bootstrap/Contents/Home \
                    --with-freetype=system \
                    --with-freetype-include=${prefix}/include/freetype2 \
                    --with-freetype-lib=${prefix}/lib \
                    --disable-warnings-as-errors \
                    --disable-precompiled-headers \
                    --with-vendor-name="Macports" \
                    --with-vendor-url="${homepage}" \
                    --with-vendor-bug-url="${bug_url}" \
                    --with-vendor-vm-bug-url="${bug_url}" \
                    --with-conf-name=openjdk14 \
                    --disable-hotspot-gtest \
                    --disable-javac-server \
                    --disable-full-docs \
                    --disable-manpages \
                    --with-toolchain-type=clang \
                    BUILD_CC=/usr/bin/clang \
                    BUILD_CXX=/usr/bin/clang++

if {${configure.build_arch} eq "arm64"} {
    configure.args-append      --with-jvm-variants=zero \
                               --with-libffi=${prefix} \
                               --enable-libffi-bundling
    depends_lib-append         port:libffi
} elseif {${configure.build_arch} eq "x86_64"} {
    configure.args-append   --with-jvm-variants=server
}

build.type          gnu
build.target        images
use_parallel_build  no
set jdkn jdk-${version}.jdk
set bundle_dir build/openjdk14/images/jdk-bundle/${jdkn}/Contents

test.run            yes
test.cmd            ${bundle_dir}/Home/bin/java
test.target         --version

set pathb ${tpath}/JavaVirtualMachines/${name}
destroot {
    xinstall -m 755 -d ${destroot}${pathb}
    copy ${worksrcpath}/${bundle_dir} ${destroot}${pathb}
}
destroot.violate_mtree      yes

post-destroot {
    delete ${worksrcpath}
}
